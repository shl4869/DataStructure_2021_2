sort_binarysearch_Readme.txt

//Program Purpose
This program is written for sorting the data before the binary search using linked list

1. typedef

(1) TreeNode:
This structure contains the key value(int key) and the link address to the left(struct TreeNode *left) and right(struct TreeNode *left) node of the node. 

1. Functions

(1) int random (int n):
This function returns the randomly selected number from 0 to n.

(2) void insert_node(TreeNode** root, int key):
The function searches for the leaf node to be a parent of a new node by comparing the input key and the key of the node in the tree. Then, if parent is NULL, which means that the tree is empty, set the new node to the root of the tree. Otherwise, the new node is inserted under the leaf node in proper location found by while loop. 
There is no return for the function. 


(3) void inorder_print(TreeNode* root):
This function prints the tree in inorder traversal.
There is no return for this function. 

(4) void main():
In main function, memory is allocated for the input array and the output tree root pointer. Then, the root of the output tree is set to NULL. At the first for loop, input array elements are generated by 'random()'. Then, each of the input are put to the binary search tree at the second for loop. Finally, the sorted result are printed in ascending order by calling 'inorder_print()' and printing out the binary search tree in inorder traversal. 
